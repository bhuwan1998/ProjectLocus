/*
import 'package:flutter/material.dart';
import 'main.dart';
//import 'package:charts_flutter/flutter.dart' as charts;
import 'package:charts_flutter/flutter.dart' as charts;
import 'CourseClass.dart';
import 'Occurrence.dart';
import 'User.dart';

class WeekView extends StatelessWidget{
  @override
  Widget build(BuildContext context){
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyWeekView(title: 'Time Management App'),
    );
  }
}
*/

/*
// it always has to add up to 24 hrs
// if I work 3 hrs then 21 hrs are free 
// and if I study another 2 hrs then 19 hrs are free

class MyWeekView extends StatefulWidget{
  MyWeekView({Key key, this.title}) : super(key : key);
  final String title;
  @override
  _MyWeekViewState createState() => _MyWeekViewState();
}

class _MyWeekViewState extends State<MyWeekView> {

  List<List<CourseData>> listofAllDays = [];
  Occurrence occurs;
  void createAllTaskData() {
    User myUser = MyHomePage.theUser;

    for(int i = 0; i < 7; i++){
      List<CourseData> listOfDayTasks = [];
      Map<String, int> listCourses = new Map();
      Map<String, int> listEndTimes = new Map();
      List<int> startTimes = [];
      List<int> endTimes = [];
      for(Courses course in myUser.courses){
        for(Occurrence occurs in course.occurrences){
          if(occurs.daysPerWeek.contains(i)){
            int time = occurs.time[1].hour - occurs.time[0].hour;
            listOfDayTasks.add(new CourseData(course.courseNameNum, time));
            listCourses[course.courseNameNum] = occurs.time[0].hour;
          }
        }
      }
      int count = 0;
      for(CourseData data in listOfDayTasks) {
        count += data.time;
      }
      int counter = 0;
      int start = 0;
      int end = 0;
      String name = "";

      for(int i = 0; i < 24; i++){
        if(startTimes.contains(i)){
          for(Courses course in myUser.courses){
            for(Occurrence occurs in course.occurrences){
              if(occurs.time[0].hour == i){
                name = course.courseNameNum;
              }
            }
          }

          if(i != end){
            if(end < i){
              listOfDayTasks.add(new CourseData('free time', (i-end))); // finding free time
            }
          }
          end = listEndTimes[name];
          start = i;
          listOfDayTasks.add(new CourseData(name, end - start));
        }

        if(i == 23){
          if(i != end) {
            listOfDayTasks.add(new CourseData('free time',i-end));
          }
        }
      }

      // List<CourseData> orderedDayCourse = [];
      // for (int i = 0; i < 24; i++){

      //}
      listofAllDays.add(listOfDayTasks);
    }

    setState() {
      build(context);
    }
  }
  

    List<List<charts.Series<CourseData, int>>> listofAllData = [];

    void data() {
      for (int i = 0; i < 7; i++){
        listofAllData.add(mondayData(i));
      }
    }
  

    List<charts.Series<CourseData, int>> mondayData(int day){
      createAllTaskData();
      final data = listofAllDays[day];

      return [
        new charts.Series<CourseData, int> (
          id: 'Sales',
          domainFn: (CourseData sales, _) => sales.time,
          measureFn: (CourseData sales, _) => sales.time,
          data: data
        )
      ];
    }

    //child: DonutPieChart(mondayData())
    @override
    Widget build(BuildContext context){
      data();
      return Scaffold(
        appBar: AppBar(
          title: Text(widget.title),
          backgroundColor: Colors.blue,
        ),
        body: Center(
          child: Container(
            margin: EdgeInsets.only(top: 50),
            child: Column(
              children: <Widget>[
                Container(
                child: Center(
                child: Container(
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: <Widget>[
                    GestureDetector(
                      child: Container(
                        child: Column(
                          children: <Widget>[
                            Text('Monday'),
                            Container(
                              height: 80,
                              width: 80,
                              child: Center(
                                child: DonutPieChart(listofAllData[0]),
                              ),
                            )
                          ],
                        ),
                       ),
                       onTap: () {
                         Navigator.push(
                          context,
                          MaterialPageRoute(builder: (context) => DayView(listofAllData[0],0)),
                         );
                       },
                      ),
                      GestureDetector(
                        child: Container(
                          child: Column(
                            children: <Widget>[
                              Text('Tuesday'),
                              Container(
                                height: 80,
                                width: 80,
                                child: Center(
                                  child: DonutPieChart(listofAllData[1]),
                                
                                ),
                              ),
                            ],
                          ),
                        ),
                        onTap: () {
                          Navigator.push(
                            context, 
                            MaterialPageRoute(builder: (context) => DayView(listofAllData[1],1)),
                          );
                        },
                      ),
                      GestureDetector(
                        child: Container(
                          child: Column(
                            children: <Widget> [
                            Text('Wednesday'),
                            Container(
                              height: 80,
                              width: 80,
                              child: Center(
                                child: DonutPieChart(listofAllData[2]),

                              ),
                            )
                            ],
                          ),
                        ),
                        onTap: () {
                          Navigator.push(
                            context,
                            MaterialPageRoute(builder: (context) => DayView(listofAllData[2],2)),

                          );
                        },
                      ),
                      GestureDetector(
                        child: Container(
                          child: Column(
                            children: <Widget>[
                              Text('Thursday'),
                              Container(
                                height: 80,
                                width: 80,
                                  child: Center(
                                  child: DonutPieChart(listofAllData[3]),
                                ),
                              ),
                            ],
                          ),
                        ),
                        onTap: () {
                          Navigator.push(
                            context,
                            MaterialPageRoute(builder: (context) => DayView(listofAllData[3],3)),
                          );
                        },
                      ),
                     ],
                    ),
                  ),
                 ),
                ),
                Container(
                  child: Center(
                    child: Container(
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: <Widget>[
                          GestureDetector(
                            child: Container(
                              child: Column(
                                children: <Widget>[
                                  Text('Friday'),
                                  Container(
                                    height: 80,
                                    width: 80,
                                    child: Center(
                                      child: DonutPieChart(listofAllData[4]), 
                                    ) ,
                                  ),
                                ],
                              ),
                            ),
                            onTap: () {
                              Navigator.push(
                                context,
                                MaterialPageRoute(builder: (context) => DayView(listofAllData[4],4))
                              );
                            },
                          ),
                          GestureDetector(
                            child: Container(
                              child: Column(
                                children: <Widget>[
                                  Text('Saturday'),
                                  Container(
                                    height: 80,
                                    width: 80,
                                    child: Center(
                                      child: DonutPieChart(listofAllData[5]),
                                    ),
                                  ),
                                ],
                              ),
                            ),
                            onTap: () {
                              Navigator.push(
                                context, 
                                MaterialPageRoute(builder: (context) => DayView(listofAllData[5],5)),
                              );
                            },
                          ),
                          GestureDetector(
                            child: Container(
                              child: Column(
                                children: <Widget>[
                                  Text('Sunday'),
                                  Container(
                                    height: 80,
                                    width: 80,
                                    child: Center(
                                      child: DonutPieChart(listofAllData[6]),
                                    ),
                                  )
                                ],
                              ),
                            ),
                            onTap: () {
                              Navigator.push(
                                context,
                                MaterialPageRoute(builder: (context) => DayView(listofAllData[6],6))
                              ).then((value) {
                                setState(() {
                                  createAllTaskData();
                                  build(context);
                                  print("Hello"+ value);
                                });
                              });
                            },
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
                
                   ],
                  )
                  )
                  ),
                  floatingActionButton: FloatingActionButton(
                    heroTag: "Helloo",
                    child: Icon(Icons.add),
                    onPressed: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(builder: (context) => MyApp()),
                      );
                      setState() {
                        build(context);
                      }
                    },
                  ),
                  floatingActionButtonLocation: FloatingActionButtonLocation.centerFloat,
                );
    }


  }

/*
  class DonutPieChart extends StatelessWidget{
    final List<charts.Series> seriesList;
    final bool animate;

    DonutPieChart(this.seriesList, {this.animate});

    /// Creates [PiecChart] with sample data and no transaction 
    factory DonutPieChart.withSampleData() {
      return new DonutPieChart(
        _createSampleData(),
        // Disable animations for image tests
        animate: false, 
      );
    }
  
  /*
  @override
  Widget build(BuildContext context){
    return new charts.PieChart(seriesList, animate: animate,
    // configure the width of the pie slices to 60px. The remaining space in 
    // the chart will be left as a hole in the center 
    defaultRenderer: new charts.ArcRendererConfig(arcWidth: 500 ),
    );
  }

  /// Create one series with sample hard coded data. 
  static List<charts.Series<CourseData, int>> _createSampleData() {
    final data = [
      new CourseData("COMP 1100", 50),
      new CourseData("COMP 2420", 30),
      new CourseData("COMP 2620", 20),
      new CourseData("Relax", 10),
    ];

    return [
      new charts.Series<CourseData, int>(
        id: "Sales",
        domainFn: (CourseData sales, _) => sales.time,
        measureFn: (CourseData sales, _) => sales.time,
        data: data
      )
    ];
  }
}

/// Sample Linear Data type
class CourseData{
  final String name;
  final int time;

  CourseData(this.name, this.time);
  
}

class DayView extends StatefulWidget {
  List<charts.Series<CourseData, int>> listOfCourses;
  int day;
  DayView(List<charts.Series<CourseData, int>> list, day) {
    this.listOfCourses = list;
    this.day = day;
  }

  @override
  _DayViewState createState() => _DayViewState(listOfCourses, day);
}

class _DayViewState extends State<DayView> {
  List<charts.Series<CourseData, int>> listOfCourses ;
  Map<int, String> days = new Map();
  int day;

  _DayViewState(List<charts.Series<CourseData, int>> list, int day){
    this.listOfCourses = list;
    this.day = day;
  }

  setIt(){
    setState() {
      build(context);
    }
  }

  BuildContext theContext;
  @override
  Widget build(BuildContext context){
    theContext = context;
    days[0] = 'Monday';
    days[0] = 'Tuesday';
    days[0] = 'Wedneday';
    days[0] = 'Thursday';
    days[0] = 'Friday';
    days[0] = 'Saturday';
    days[0] = 'Sunday';

    return Scaffold(
      appBar: AppBar(
        title: Text(days[day]),
         ),
        body: Center(
          child: Column(
            children: <Widget>[
                Container(
                  height: 300,
                  width: 300,
                  child: charts.PieChart(listOfCourses),  
                ),
                Container(
                  constraints: BoxConstraints.expand(height: 260),
                  child: ListView(children: makeCourseList(),),
                 ),   
             ],
        )
      )     

    );
    
  }

  TextStyle labelstyle = new TextStyle(fontFamily: 'Avenir', fontSize: 20, fontWeight: FontWeight.bold);

  List<Widget> makeCourseList() {
    List<String> courseNames = [];
    Map<String, int> hoursList = new Map();
    Map<String, DateTime> timeOfDay = new Map();
    for(Courses course in MyHomePage.theUser.courses){
      for(Occurrence occurs in course.occurrences){
        if(occurs.daysPerWeek.contains(day)){
          if(!courseNames.contains(course.courseNameNum)){
            courseNames.add(course.courseNameNum);
            int time = occurs.time[1].hour - occurs.time[0].hour;
            hoursList[course.courseNameNum] = time;
            timeOfDay[course.courseNameNum] = occurs.time[0];
          }
        }
      }
    }
      List<Widget> rows = [];
      for(int i = 0; i < courseNames.length; i++){
        Container newContainer = new Container(
          height: 100,
          width: 300,
          child: GestureDetector(
            child: Card(
              elevation: 5,
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: <Widget>[
                Row(
                mainAxisAlignment: MainAxisAlignment.spaceAround,
                children: <Widget>[
                  Text(courseNames[i], style: labelstyle),
                  Text(makeTheTimeString(timeOfDay[courseNames[i]], hoursList[courseNames[i]]), style: labelstyle,),
                ],
              ),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceAround,
                children: <Widget>[
                  Text("Total Time:" ,style: labelstyle,),
                  Text(hoursList[courseNames[i]].toString() + "hrs", style: labelstyle),
                ],
              ),
             ],
            ),
          ),
          onTap: () {
            print('Pressed');
           // _showDialog(courseNames[i], hoursList[courseNames[i]], timeOfDay[courseNames[i]]);
          },
          )
        );
        rows.add(newContainer);
      }
      return rows;
    }
  
  

    void _showDialog(String coursename, int duration, DateTime startTimeOfDay) {
      // flutter defined function 
      showDialog(
        context: context, 
        builder: (BuildContext context) {
          // return object of type Dialog
          return AlertDialog(
            title: Text('Time:' + makeTheTimeString(startTimeOfDay, duration) ),
            actions: <Widget>[
              //usually buttons at the bottom of the dialog 
              FlatButton(
                child: Text('Close'),
                onPressed: () {
                  Navigator.of(context).pop();
                },
              ),
              FlatButton(
                key: Key('one'),
                child: Text("Delete"),
                onPressed: () {
                  deleteACourse(coursename);
                  Navigator.of(context).pop();
                  Navigator.of(context).pop();
                }
              ),
            ],
          );
        },
      );
    }
  
  
*/

/*
    void deleteACourse(String coursename){
      List<Courses> courseList = MyHomePage.theUser.courses;
      for(Courses course in courseList){
        if(course.courseNameNum == coursename){
          course.removeOccurrenceByDay(day);
        }
      }
      MyHomePage.theUser.courses = courseList;
    }

    String makeTheTimeString(DateTime date, int duration){
      if(date.minute > 10){
        return date.hour.toString() + ":" + date.minute.toString() + "-" + (date.hour + duration).toString() + ":" + date.minute.toString();
      }
      else {
        return date.hour.toString() + ":0" + date.minute.toString() + "-" + (date.hour + duration).toString() + ":0" + date.minute.toString();
      }
    }
  }
  */




